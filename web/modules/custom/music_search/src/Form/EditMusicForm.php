<?php

namespace Drupal\music_search\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\TempStore\PrivateTempStoreFactory;
use Drupal\music_search\MusicSearchService;
use Drupal\spotify_lookup\SpotifyLookupService;
use Drupal\discogs_lookup\DiscogsLookupService;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * The last form in the series.
 * Provides the user to edit the final result of the content.
 */
class EditMusicForm extends FormBase {
  /**
   * Drupal\Core\Messenger\MessengerInterface definition
   *
   * @var \Drupal\Core\Messenger\MessengerInterface
   */
  protected $messenger;

  /**
   * Drupal\Core\Logger\LoggerChannelFactoryInterface definition
   *
   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
   */
  protected $loggerFactory;

  /**
   * Drupal\Core\TempStore\PrivateTempStoreFactory definition
   *
   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
   */
  protected $tempStoreFactory;

  /**
   * @var \Drupal\music_search\MusicSearchService
   */
  protected $service;

  /**
   * @var \Drupal\spotify_lookup\SpotifyLookupService
   */
  protected $spotifyService;

  /**
   * @var \Drupal\discogs_lookup\DiscogsLookupService
   */
  protected $discogsService;

  /**
   * Constructs a new EditMusicForm object
   */
  public function __construct(
    MessengerInterface $messenger,
    LoggerChannelFactoryInterface $logger_factory,
    PrivateTempStoreFactory $tempStoreFactory,
    MusicSearchService $musicSearchService,
    SpotifyLookupService $spotifyService,
    DiscogsLookupService $discogsService
  ) {
    $this->messenger = $messenger;
    $this->loggerFactory = $logger_factory;
    $this->tempStoreFactory = $tempStoreFactory;
    $this->service = $musicSearchService;
    $this->spotifyService = $spotifyService;
    $this->discogsService = $discogsService;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('messenger'),
      $container->get('logger.factory'),
      $container->get('tempstore.private'),
      $container->get('music_search.service'),
      $container->get('music_search.spotify.service'),
      $container->get('music_search.discogs.service')
    );
  }

  /**
   * @inheritDoc
   */
  public function getFormId() {
    return 'music_search_edit_form';
  }

  /**
   * @inheritDoc
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $tempstore = $this->tempStoreFactory->get('music_search');
    $params = $tempstore->get('params');
//    $matches = $tempstore->get('matches');
    $query = $params['query'];
//    $discogsIDs = $params['discogsIDs'];
//    $spotifyIDs = $params['spotifyIDs'];
    $ids = $params['ids'];
    $type = $params['type'];

    $result = [];
    foreach($ids as $id) {  // Why is $result so empty? :cry_emoji:
      if (ctype_digit($id)) {  // If True then it's Discogs, else Discogs
        $result[$id] = $this->discogsService->getById($id, $type);
      } else {
        $result[$id] = $this->spotifyService->getById($id, $type);
      }
    }

    $form['title'] = [
      '#type' => 'textarea',
    ];

    $form['actions'] = [
      '#type' => 'actions',
      'submit' => [
        '#type' => 'submit',
        '#value' => $this->t('Save')
      ],
      '#weight' => -1
    ];

    return $form;
  }

  /**
   * @inheritDoc
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * @inheritDoc
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // TODO: Implement submitForm() method.
  }
}
